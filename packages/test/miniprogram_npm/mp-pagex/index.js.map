{"version":3,"sources":["page.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/// <reference path=\"../libs/page.d.ts\" />\nvar mp_computed_1 = require(\"mp-computed\");\n// merge mixins into page's options\nfunction mergeOptions(origin, mixin) {\n    var result = Object.assign({}, origin);\n    Object.keys(mixin)\n        .forEach(function (key) {\n        var newProp = mixin[key];\n        var oldProp = result[key];\n        switch (Object.prototype.toString.call(newProp)) {\n            case '[object Function]':\n                result[key] = function () {\n                    var args = [];\n                    for (var _i = 0; _i < arguments.length; _i++) {\n                        args[_i] = arguments[_i];\n                    }\n                    var _a;\n                    (_a = mixin[key]).call.apply(_a, [this].concat(args));\n                    oldProp && (typeof oldProp === 'function') && oldProp.call.apply(oldProp, [this].concat(args));\n                };\n                break;\n            case '[object Object]':\n                result[key] = Object.assign({}, mixin[key], result[key]);\n                break;\n            default:\n                result[key] = oldProp === undefined ? newProp : oldProp;\n        }\n    });\n    return result;\n}\nvar PageX = /** @class */ (function () {\n    function PageX(options, mergeStrategy) {\n        if (mergeStrategy === void 0) { mergeStrategy = mergeOptions; }\n        var localMixins = PageX.__globalMixin__;\n        if (options.mixins && options.mixins.length) {\n            localMixins = options.mixins.reduce(function (prev, curr) { return mergeStrategy(curr, prev); }, localMixins);\n        }\n        options = mergeStrategy(options, localMixins);\n        if (options.computed && Object.keys(options.computed).length) {\n            options = mergeStrategy(options, {\n                onLoad: function () {\n                    mp_computed_1.createReactive.call(this);\n                    mp_computed_1.hookSetData.call(this);\n                }\n            });\n        }\n        new Page(options);\n    }\n    PageX.__globalMixin__ = {};\n    PageX.mixin = function (mixinProps) {\n        PageX.__globalMixin__ = mixinProps;\n    };\n    return PageX;\n}());\nexports.default = PageX;\n;\n"]}